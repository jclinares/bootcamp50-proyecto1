/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdatabanking.productservice.api;

import com.nttdatabanking.productservice.domain.CreditService;
import com.nttdatabanking.productservice.domain.dto.CreditCreateDto;
import com.nttdatabanking.productservice.domain.dto.CreditDetailDto;
import com.nttdatabanking.productservice.domain.dto.CreditMovementCreateDto;
import com.nttdatabanking.productservice.domain.dto.CreditMovementDetailDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import javax.validation.Valid;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-27T16:34:21.491983300-05:00[America/Lima]")
@Validated
@Tag(name = "credit", description = "credit operations")
public interface CreditApi {

        default CreditService getCreditService() {
                return null;
        }

        /**
         * POST /credit : operation credit create
         *
         * @param creditCreateDto create credit (required)
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "creditcreate", summary = "operation credit create", tags = { "credit" }, responses = {
                        @ApiResponse(responseCode = "200", description = "successful operation", content = {
                                        @Content(mediaType = "application/json", schema = @Schema(implementation = CreditDetailDto.class))
                        }),
                        @ApiResponse(responseCode = "400", description = "invalid input")
        })
        @RequestMapping(method = RequestMethod.POST, value = "/credit", produces = { "application/json" }, consumes = {
                        "application/json" })
        default Mono<CreditDetailDto> creditcreate(
                        @Parameter(name = "CreditCreateDto", description = "create credit", required = true) @Valid @RequestBody Mono<CreditCreateDto> creditCreateDto,
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCreditService().create(creditCreateDto);
        }

        /**
         * GET /credit/{customerid} : operation credit get list
         *
         * @param customerid customer id (required)
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "creditgetlist", summary = "operation credit get list", tags = {
                        "credit" }, responses = {
                                        @ApiResponse(responseCode = "200", description = "successful operation", content = {
                                                        @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CreditDetailDto.class)))
                                        }),
                                        @ApiResponse(responseCode = "400", description = "invalid input")
                        })
        @RequestMapping(method = RequestMethod.GET, value = "/credit/{customerid}", produces = { "application/json" })
        default Flux<CreditDetailDto> creditgetlist(
                        @Parameter(name = "customerid", description = "customer id", required = true, in = ParameterIn.PATH) @PathVariable("customerid") String customerid,
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCreditService().getList(customerid);
        }

        /**
         * POST /credit/movement : operation credit movement create
         *
         * @param creditMovementCreateDto create credit movement (required)
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "creditmovementcreate", summary = "operation credit movement create", tags = {
                        "credit" }, responses = {
                                        @ApiResponse(responseCode = "200", description = "successful operation", content = {
                                                        @Content(mediaType = "application/json", schema = @Schema(implementation = CreditMovementDetailDto.class))
                                        }),
                                        @ApiResponse(responseCode = "400", description = "invalid input")
                        })
        @RequestMapping(method = RequestMethod.POST, value = "/credit/movement", produces = {
                        "application/json" }, consumes = { "application/json" })
        default Mono<CreditMovementDetailDto> creditmovementcreate(
                        @Parameter(name = "CreditMovementCreateDto", description = "create credit movement", required = true) @Valid @RequestBody Mono<CreditMovementCreateDto> creditMovementCreateDto,
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCreditService().createMovement(creditMovementCreateDto);
        }

        /**
         * GET /credit/movement/{creditid} : operation credit movement get list
         *
         * @param creditid credit id (required)
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "creditmovementgetlist", summary = "operation credit movement get list", tags = {
                        "credit" }, responses = {
                                        @ApiResponse(responseCode = "200", description = "successful operation", content = {
                                                        @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CreditMovementDetailDto.class)))
                                        }),
                                        @ApiResponse(responseCode = "400", description = "invalid input")
                        })
        @RequestMapping(method = RequestMethod.GET, value = "/credit/movement/{creditid}", produces = {
                        "application/json" })
        default Flux<CreditMovementDetailDto> creditmovementgetlist(
                        @Parameter(name = "creditid", description = "credit id", required = true, in = ParameterIn.PATH) @PathVariable("creditid") String creditid,
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCreditService().getMovementList(creditid);
        }

}
