/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdatabanking.productservice.api;

import com.nttdatabanking.productservice.domain.AccountService;
import com.nttdatabanking.productservice.domain.dto.AccountCreateDto;
import com.nttdatabanking.productservice.domain.dto.AccountDetailDto;
import com.nttdatabanking.productservice.domain.dto.AccountMovementCreateDto;
import com.nttdatabanking.productservice.domain.dto.AccountMovementDetailDto;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import javax.validation.Valid;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-27T12:46:41.705912500-05:00[America/Lima]")
@Validated
@Tag(name = "account", description = "account operations")
public interface AccountApi {

    default AccountService getAccountService() {
        return null;
    }

    /**
     * POST /account : operation account create
     *
     * @param accountCreateDto create account (required)
     * @return successful operation (status code 200)
     *         or invalid input (status code 400)
     */
    @Operation(operationId = "accountcreate", summary = "operation account create", tags = { "account" }, responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                    @Content(mediaType = "application/json", schema = @Schema(implementation = AccountDetailDto.class))
            }),
            @ApiResponse(responseCode = "400", description = "invalid input")
    })
    @RequestMapping(method = RequestMethod.POST, value = "/account", produces = { "application/json" }, consumes = {
            "application/json" })
    default Mono<AccountDetailDto> accountcreate(
            @Parameter(name = "AccountCreateDto", description = "create account", required = true) @Valid @RequestBody Mono<AccountCreateDto> accountCreateDto,
            @Parameter(hidden = true) final ServerWebExchange exchange) {
        return getAccountService().create(accountCreateDto);
    }

    /**
     * GET /account/{customerid} : operation account get list
     *
     * @param customerid customer id (required)
     * @return successful operation (status code 200)
     *         or invalid input (status code 400)
     */
    @Operation(operationId = "accountgetlist", summary = "operation account get list", tags = {
            "account" }, responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountDetailDto.class)))
                    }),
                    @ApiResponse(responseCode = "400", description = "invalid input")
            })
    @RequestMapping(method = RequestMethod.GET, value = "/account/{customerid}", produces = { "application/json" })
    default Flux<AccountDetailDto> accountgetlist(
            @Parameter(name = "customerid", description = "customer id", required = true, in = ParameterIn.PATH) @PathVariable("customerid") String customerid,
            @Parameter(hidden = true) final ServerWebExchange exchange) {
        return getAccountService().getList(customerid);
    }

    /**
     * POST /account/movement : operation account movement create
     *
     * @param accountMovementCreateDto create account movement (required)
     * @return successful operation (status code 200)
     *         or invalid input (status code 400)
     */
    @Operation(operationId = "accountmovementcreate", summary = "operation account movement create", tags = {
            "account" }, responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", schema = @Schema(implementation = AccountMovementDetailDto.class))
                    }),
                    @ApiResponse(responseCode = "400", description = "invalid input")
            })
    @RequestMapping(method = RequestMethod.POST, value = "/account/movement", produces = {
            "application/json" }, consumes = { "application/json" })
    default Mono<AccountMovementDetailDto> accountmovementcreate(
            @Parameter(name = "AccountMovementCreateDto", description = "create account movement", required = true) @Valid @RequestBody Mono<AccountMovementCreateDto> accountMovementCreateDto,
            @Parameter(hidden = true) final ServerWebExchange exchange) {
        return getAccountService().createMovement(accountMovementCreateDto);
    }

    /**
     * GET /account/movement/{accountid} : operation account movement get list
     *
     * @param accountid account id (required)
     * @return successful operation (status code 200)
     *         or invalid input (status code 400)
     */
    @Operation(operationId = "accountmovementgetlist", summary = "operation account movement get list", tags = {
            "account" }, responses = {
                    @ApiResponse(responseCode = "200", description = "successful operation", content = {
                            @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = AccountMovementDetailDto.class)))
                    }),
                    @ApiResponse(responseCode = "400", description = "invalid input")
            })
    @RequestMapping(method = RequestMethod.GET, value = "/account/movement/{accountid}", produces = {
            "application/json" })
    default Flux<AccountMovementDetailDto> accountmovementgetlist(
            @Parameter(name = "accountid", description = "account id", required = true, in = ParameterIn.PATH) @PathVariable("accountid") String accountid,
            @Parameter(hidden = true) final ServerWebExchange exchange) {
        return getAccountService().getMovementList(accountid);
    }

}
