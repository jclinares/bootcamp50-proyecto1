/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.nttdatabanking.customerservice.api;

import com.nttdatabanking.customerservice.domain.dto.CustomerCreateDto;
import com.nttdatabanking.customerservice.domain.dto.CustomerDetailDto;
import com.nttdatabanking.customerservice.domain.dto.CustomerUpdateDto;
import com.nttdatabanking.customerservice.domain.service.CustomerService;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.server.ServerWebExchange;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import javax.validation.Valid;
import javax.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2024-02-27T07:29:54.906932400-05:00[America/Lima]")
@Validated
@Tag(name = "customer", description = "customer operations")
public interface CustomerApi {

        default CustomerService getCustomerService() {
                return null;
        }

        /**
         * POST /customer : operation customer create
         *
         * @param customerCreateDto create customer (required)
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "customercreate", summary = "operation customer create", tags = {
                        "customer" }, responses = {
                                        @ApiResponse(responseCode = "200", description = "successful operation", content = {
                                                        @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerDetailDto.class))
                                        }),
                                        @ApiResponse(responseCode = "400", description = "invalid input") })
        @RequestMapping(method = RequestMethod.POST, value = "/customer", produces = {
                        "application/json" }, consumes = { "application/json" })
        default Mono<CustomerDetailDto> customercreate(
                        @Parameter(name = "CustomerCreateDto", description = "create customer", required = true) @Valid @RequestBody Mono<CustomerCreateDto> customerCreateDto,
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCustomerService().create(customerCreateDto);
        }

        /**
         * DELETE /customer/{id} : operation customer delete
         *
         * @param id customer id (required)
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "customerdelete", summary = "operation customer delete", tags = {
                        "customer" }, responses = {
                                        @ApiResponse(responseCode = "200", description = "successful operation"),
                                        @ApiResponse(responseCode = "400", description = "invalid input")
                        })
        @RequestMapping(method = RequestMethod.DELETE, value = "/customer/{id}")
        default Mono<Void> customerdelete(
                        @Parameter(name = "id", description = "customer id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCustomerService().delete(id);
        }

        /**
         * GET /customer/{id} : operation customer get by id
         *
         * @param id customer id (required)
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "customergetbyid", summary = "operation customer get by id", tags = {
                        "customer" }, responses = {
                                        @ApiResponse(responseCode = "200", description = "successful operation", content = {
                                                        @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerDetailDto.class))
                                        }),
                                        @ApiResponse(responseCode = "400", description = "invalid input")
                        })
        @RequestMapping(method = RequestMethod.GET, value = "/customer/{id}", produces = { "application/json" })
        default Mono<CustomerDetailDto> customergetbyid(
                        @Parameter(name = "id", description = "customer id", required = true, in = ParameterIn.PATH) @PathVariable("id") String id,
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCustomerService().getById(id);
        }

        /**
         * GET /customer : operation customer get list
         *
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "customergetlist", summary = "operation customer get list", tags = {
                        "customer" }, responses = {
                                        @ApiResponse(responseCode = "200", description = "successful operation", content = {
                                                        @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = CustomerDetailDto.class)))
                                        }),
                                        @ApiResponse(responseCode = "400", description = "invalid input")
                        })
        @RequestMapping(method = RequestMethod.GET, value = "/customer", produces = { "application/json" })
        default Flux<CustomerDetailDto> customergetlist(
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCustomerService().getList();
        }

        /**
         * PUT /customer/{id} : operation customer update
         *
         * @param id                customer id (required)
         * @param customerUpdateDto update customer (optional)
         * @return successful operation (status code 200)
         *         or invalid input (status code 400)
         */
        @Operation(operationId = "customerupdate", summary = "operation customer update", tags = {
                        "customer" }, responses = {
                                        @ApiResponse(responseCode = "200", description = "successful operation", content = {
                                                        @Content(mediaType = "application/json", schema = @Schema(implementation = CustomerDetailDto.class))
                                        }),
                                        @ApiResponse(responseCode = "400", description = "invalid input")
                        })
        @RequestMapping(method = RequestMethod.PUT, value = "/customer", produces = {
                        "application/json" }, consumes = { "application/json" })
        default Mono<CustomerDetailDto> customerupdate(
                        @Parameter(name = "CustomerUpdateDto", description = "update customer") @Valid @RequestBody(required = false) Mono<CustomerUpdateDto> customerUpdateDto,
                        @Parameter(hidden = true) final ServerWebExchange exchange) {
                return getCustomerService().update(customerUpdateDto);
        }

}
